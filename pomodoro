#!/bin/zsh

SLEEP_DURATION=1

# Старт таймера.
start-pomodoro() {
    # Выключаем уведомления MacOS.
    osascript -e "tell application \"System Events\" to keystroke \"N\" using {shift down, control down, option down, command down}"
    # Выключаем уведомления Slack.
    local slack=$(osascript -e "tell application \"System Events\" to (name of processes) contains \"Slack\"")
    if [[ ${slack} == "true" ]]; then
        osascript -e "activate application \"Slack\""
        osascript -e "tell application \"System Events\" to keystroke \"/dnd for ${mins} minutes\""
        osascript -e "tell application \"System Events\" to keystroke {return}"
        osascript -e "activate application \"iTerm2\""
    fi
    # Выводим название задачи и продолжительность.
    echo "Task \"${task}\" - ${mins} min."
    # Проговариваем задачу.
    say "Start ${task}"
    # Включаем музыку
    osascript -e "tell application \"Music\" to play playlist \"Work\""
}

# Остановка таймера.
stop-pomodoro() {
    local checkbox="[v]"
    local phrase="You are rock!"

    end=$SECONDS
    duration=$(((end - start) / 60))

    if ((duration < mins)); then
        echo "\n"
        read "completed?Task is completed? (y/N): "

        if [[ ! $completed =~ ^[Yy]$ ]]; then
            checkbox="[ ]"
            phrase="Fail"
        fi
    fi

    if ((duration < 10)); then
        duration=" ${duration}"
    fi

    # Записываем результат.
    echo "${now} | ${duration} min. | ${checkbox} | ${task}" >>pomodoro.log
    # Включаем уведомления MacOS.
    osascript -e "tell application \"System Events\" to keystroke \"N\" using {shift down, control down, option down, command down}"
    # Выключаем музыку.
    osascript -e "tell application \"Music\" to stop"
    # Говорим фразу.
    say "${phrase}"
}

progress-bar() {
    local duration
    local columns
    local space_available
    local fit_to_screen
    local space_reserved

    space_reserved=10
    duration=${1}
    columns=$(tput cols)
    space_available=$((columns - space_reserved))

    if ((duration < space_available)); then
        fit_to_screen=1
    else
        fit_to_screen=$((duration / space_available))
        fit_to_screen=$((fit_to_screen + 1))
    fi

    already_done() { for ((done = 0; done < (elapsed / fit_to_screen); done = done + 1)); do printf "▇"; done; }
    remaining() { for ((remain = (elapsed / fit_to_screen); remain < (duration / fit_to_screen); remain = remain + 1)); do printf " "; done; }
    percentage() { printf "| %s%%  " $((((elapsed) * 100) / (duration) * 100 / 100)); }
    clean_line() { printf "\r"; }

    for ((elapsed = 1; elapsed <= duration; elapsed = elapsed + 1)); do
        columns=$(tput cols)
        space_available=$((columns - space_reserved))
        already_done
        remaining
        percentage
        sleep "$SLEEP_DURATION"
        clean_line
    done
    clean_line
}

mins=${1}
task=${2}
now=$(date +"%Y-%m-%d %T")
start=$SECONDS

function TRAPINT() {
    stop-pomodoro
    exit
}

# Очищаем терминал перед запуском прогрессбара.
reset

start-pomodoro
progress-bar $((mins * 60))
stop-pomodoro
